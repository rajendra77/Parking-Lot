{"version":3,"sources":["components/Form.js","App.js","serviceWorker.js","index.js"],"names":["Form","checkStatus","_this","props","readyStatus","numberOfSpaces","react_default","a","createElement","onClick","makeReadyForCarDetails","GenerateCarRandomly","readyForCarDetails","type","name","value","numberOfCars","onChange","handleChangeCar","fill","this","handleChange","checkReady","Component","App","state","ready","event","setState","target","className","components_Form","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","then","registration","unregister"],"mappings":"yNAsDeA,oNAlDbC,YAAc,WAEX,IAA4B,IAAzBC,EAAKC,MAAMC,aAAkD,KAA5BF,EAAKC,MAAME,eAE9C,OACEC,EAAAC,EAAAC,cAAA,WACKF,EAAAC,EAAAC,cAAA,0CAAkCN,EAAKC,MAAME,eAA7C,SACAC,EAAAC,EAAAC,cAAA,UAAQC,QAASP,EAAKC,MAAMO,wBAA5B,eAMXC,oBAAqB,WAEnB,IAAmC,IAAhCT,EAAKC,MAAMS,mBAEb,OACEN,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,0DACAF,EAAAC,EAAAC,cAAA,SAAOK,KAAK,OAAOC,KAAK,WAAWC,MAAOb,EAAKC,MAAMa,aAAcC,SAAUf,EAAKC,MAAMe,kBACxFZ,EAAAC,EAAAC,cAAA,UAAQC,QAASP,EAAKC,MAAMgB,MAA5B,kFAUP,OACIb,EAAAC,EAAAC,cAAA,WACUF,EAAAC,EAAAC,cAAA,sEAEAF,EAAAC,EAAAC,cAAA,SAAOK,KAAK,OAAOC,KAAK,YAAYC,MAAOK,KAAKjB,MAAME,eAAgBY,SAAUG,KAAKjB,MAAMkB,eAC3Ff,EAAAC,EAAAC,cAAA,UAAQC,QAASW,KAAKjB,MAAMmB,YAA5B,UAEAhB,EAAAC,EAAAC,cAAA,WAAMY,KAAKnB,eAEXK,EAAAC,EAAAC,cAAA,WAAMY,KAAKT,+BA1CVY,cCmDJC,6MA9CZC,MAAM,CACLpB,eAAe,GACfqB,OAAM,EACNd,oBAAmB,EACnBI,aAAa,MAKfK,aAAe,SAACM,GAEdzB,EAAK0B,SAAS,CACZvB,eAAesB,EAAME,OAAOd,MAC5BW,OAAM,OAGZJ,WAAa,WAEXpB,EAAK0B,SAAS,CACXF,OAAM,OAIVhB,uBAAyB,WACxBR,EAAK0B,SAAS,CACZhB,oBAAmB,OAIvBM,gBAAkB,SAACS,GACjBzB,EAAK0B,SAAS,CACZZ,aAAaW,EAAME,OAAOd,iFAM1B,OACET,EAAAC,EAAAC,cAAA,OAAKsB,UAAU,OACbxB,EAAAC,EAAAC,cAACuB,EAAD,CAAMf,aAAcI,KAAKK,MAAMT,aAAcN,uBAAwBU,KAAKV,uBAAwBE,mBAAoBQ,KAAKK,MAAMb,mBAAoBM,gBAAiBE,KAAKF,gBAAiBd,YAAagB,KAAKK,MAAMC,MAAOJ,WAAaF,KAAKE,WAAYD,aAAcD,KAAKC,aAAchB,eAAgBe,KAAKK,MAAMpB,yBAzC3SkB,aCOES,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOhC,EAAAC,EAAAC,cAAC+B,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcjB,MAAMkB,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.c837fd78.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nclass Form extends Component {\r\n\r\n  checkStatus = () => {\r\n   \r\n     if(this.props.readyStatus===true && this.props.numberOfSpaces!=='')\r\n     {\r\n      return (  \r\n        <div>\r\n             <h1>Your Paking lot is Ready for {this.props.numberOfSpaces} Cars</h1>\r\n             <button onClick={this.props.makeReadyForCarDetails}>Proceed</button>\r\n        </div>\r\n        )\r\n     }      \r\n  }\r\n\r\n  GenerateCarRandomly= () => {\r\n    \r\n    if(this.props.readyForCarDetails===true)\r\n    {\r\n     return (  \r\n       <div>\r\n           <h2>Enter Random Number of cars to fill parking </h2>\r\n           <input type='text' name='noOfCars' value={this.props.numberOfCars} onChange={this.props.handleChangeCar}/>\r\n           <button onClick={this.props.fill}>Fill</button>\r\n         \r\n       </div>\r\n       )\r\n    }      \r\n }\r\n  \r\n\r\n  render() {\r\n  \r\n    return (\r\n        <div>\r\n                  <h2>Enter the no of parking spaces you want for your parking</h2>\r\n           \r\n                  <input type='text' name='noOfSpace' value={this.props.numberOfSpaces} onChange={this.props.handleChange} />\r\n                  <button onClick={this.props.checkReady}>Create</button>\r\n           \r\n                  <div>{this.checkStatus()}</div>\r\n\r\n                  <div>{this.GenerateCarRandomly()}</div>\r\n\r\n           \r\n        </div>\r\n       \r\n        \r\n    );\r\n  }\r\n}\r\n\r\nexport default Form;\r\n","import React, { Component } from 'react';\nimport './App.css';\nimport Form from './components/Form';\n\n\nclass App extends Component {\n\n   state={\n    numberOfSpaces:'',\n    ready:false,\n    readyForCarDetails:false,\n    numberOfCars:'',\n   \n   }\n\n \n  handleChange = (event) =>{\n\n    this.setState({\n      numberOfSpaces:event.target.value,\n      ready:false,\n    })\n  }\ncheckReady = () =>{\n\n  this.setState({\n     ready:true, \n  })\n }\n\n makeReadyForCarDetails = () =>{\n  this.setState({\n    readyForCarDetails:true, \n })\n}\n\nhandleChangeCar = (event) =>{\n  this.setState({\n    numberOfCars:event.target.value, \n })\n}\n\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Form numberOfCars={this.state.numberOfCars} makeReadyForCarDetails={this.makeReadyForCarDetails} readyForCarDetails={this.state.readyForCarDetails} handleChangeCar={this.handleChangeCar} readyStatus={this.state.ready} checkReady ={this.checkReady} handleChange={this.handleChange} numberOfSpaces={this.state.numberOfSpaces}/>\n        \n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}